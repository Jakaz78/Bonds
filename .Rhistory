if (length(close_var) > 0) {
new_close_name <- diff_info[["CLOSE"]]$name
Y_stationary <- data_stationary[new_close_name]
}
}
# Pozostałe zmienne jako X
X_stationary <- data_stationary[, !colnames(data_stationary) %in%
c("CLOSE", if(exists("new_close_name")) new_close_name else "")]
cat("\nNowe wymiary:\n")
cat("Y_stationary:", nrow(Y_stationary), "x", ncol(Y_stationary), "\n")
cat("X_stationary:", nrow(X_stationary), "x", ncol(X_stationary), "\n")
print(X_stationary)
print(Y_stationary)
# Funkcja do sprawdzenia stacjonarności po różnicowaniu
check_stationarity_after_diff <- function(series, name, max_diff = 2) {
original_series <- series
diff_order <- 0
for (i in 0:max_diff) {
if (i == 0) {
test_series <- series
diff_label <- ""
} else {
test_series <- diff(original_series, differences = i)
diff_label <- paste0("(", i, " różnica)")
}
# Usuń NA
test_series <- test_series[!is.na(test_series)]
if (length(test_series) < 10) next  # Za mało obserwacji
# Test ADF
adf <- ur.df(test_series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stationary <- (adf_stat < adf_crit)
# Test KPSS
tryCatch({
kpss <- kpss.test(test_series)
kpss_stationary <- (kpss$p.value > 0.05)
}, error = function(e) {
kpss_stationary <- TRUE  # Jeśli test się nie powiedzie, załóż stacjonarność
})
cat("Zmienna:", name, diff_label, "\n")
cat("ADF stationary:", adf_stationary, "(stat:", round(adf_stat, 3), ", crit:", round(adf_crit, 3), ")\n")
cat("KPSS stationary:", kpss_stationary, "\n")
# Jeśli oba testy wskazują na stacjonarność
if (adf_stationary && kpss_stationary) {
diff_order <- i
cat("*** Zmienna", name, "jest stacjonarna po", i, "różnicowaniu ***\n\n")
break
}
cat("\n")
}
return(diff_order)
}
# Tworzenie nowego zbioru danych ze stacjonarnymi zmiennymi
data_stationary <- list()  # Używamy listy zamiast data.frame
# Lista do przechowywania informacji o różnicowaniu
diff_info <- list()
# Znajdź maksymalny poziom różnicowania potrzebny
max_diff_needed <- 0
temp_diff_orders <- list()
for (var in colnames(data)) {
series <- data[[var]]
if (var %in% non_stationary_vars) {
diff_order <- check_stationarity_after_diff(series, var)
temp_diff_orders[[var]] <- diff_order
max_diff_needed <- max(max_diff_needed, diff_order)
} else {
temp_diff_orders[[var]] <- 0
}
}
cat("Maksymalny poziom różnicowania potrzebny:", max_diff_needed, "\n\n")
# Przetwarzanie każdej zmiennej z wyrównaniem długości
for (var in colnames(data)) {
series <- data[[var]]
cat("=== Przetwarzanie zmiennej:", var, "===\n")
diff_order <- temp_diff_orders[[var]]
if (diff_order > 0) {
cat("Zmienna", var, "jest niestacjonarna - różnicowanie stopnia", diff_order, "\n")
# Zastosuj różnicowanie
diff_series <- diff(series, differences = diff_order)
new_name <- paste0("D", if(diff_order > 1) diff_order else "", "_", var)
# Dopasuj długość - dodaj NA na początku
aligned_series <- c(rep(NA, max_diff_needed), diff_series)
if (length(aligned_series) > length(series)) {
aligned_series <- aligned_series[1:length(series)]
} else if (length(aligned_series) < length(series)) {
aligned_series <- c(aligned_series, rep(NA, length(series) - length(aligned_series)))
}
data_stationary[[new_name]] <- aligned_series
diff_info[[var]] <- list(order = diff_order, name = new_name)
cat("Zmienna", var, "przekształcona na", new_name, "\n")
} else {
# Zmienna już stacjonarna - dopasuj długość przez dodanie NA na początku
if (max_diff_needed > 0) {
aligned_series <- c(rep(NA, max_diff_needed), series)
if (length(aligned_series) > length(series)) {
aligned_series <- aligned_series[1:length(series)]
}
data_stationary[[var]] <- aligned_series
} else {
data_stationary[[var]] <- series
}
diff_info[[var]] <- list(order = 0, name = var)
cat("Zmienna", var, "już stacjonarna - pozostawiam bez zmian\n")
}
cat("\n" , rep("=", 50), "\n\n")
}
# Konwertuj listę na data.frame
data_stationary <- as.data.frame(data_stationary)
# Usuń wiersze z NA (powstałe przez różnicowanie)
data_stationary <- data_stationary[complete.cases(data_stationary), ]
cat("PODSUMOWANIE PRZEKSZTAŁCEŃ:\n")
cat("===========================\n")
for (var in names(diff_info)) {
info <- diff_info[[var]]
if (info$order == 0) {
cat(var, "-> pozostała bez zmian\n")
} else {
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
}
cat("\nWymiary oryginalnych danych:", nrow(data), "x", ncol(data), "\n")
cat("Wymiary przekształconych danych:", nrow(data_stationary), "x", ncol(data_stationary), "\n")
# Sprawdź czy wszystkie zmienne są teraz stacjonarne
cat("\nKONTROLA STACJONARNOŚCI KOŃCOWYCH ZMIENNYCH:\n")
cat("==========================================\n")
final_non_stationary <- c()
for (var in colnames(data_stationary)) {
series <- data_stationary[[var]]
series <- series[!is.na(series)]
if (length(series) < 10) next
# Test ADF
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stationary <- (adf_stat < adf_crit)
# Test KPSS
tryCatch({
kpss <- kpss.test(series)
kpss_stationary <- (kpss$p.value > 0.05)
}, error = function(e) {
kpss_stationary <- TRUE
})
if (!(adf_stationary && kpss_stationary)) {
final_non_stationary <- c(final_non_stationary, var)
}
cat(var, "- ADF:", adf_stationary, ", KPSS:", kpss_stationary,
"-> ", if(adf_stationary && kpss_stationary) "STACJONARNA" else "NIESTACJONARNA", "\n")
}
if (length(final_non_stationary) > 0) {
cat("\nUWAGA: Następujące zmienne nadal mogą być niestacjonarne:\n")
for (var in final_non_stationary) {
cat("- ", var, "\n")
}
} else {
cat("\nWszystkie zmienne są teraz stacjonarne!\n")
}
# Aktualizacja Y i X na podstawie nowych danych
if ("CLOSE" %in% colnames(data_stationary)) {
Y_stationary <- data_stationary["CLOSE"]
} else {
# Znajdź przekształconą wersję CLOSE
close_var <- names(diff_info)[names(diff_info) == "CLOSE"]
if (length(close_var) > 0) {
new_close_name <- diff_info[["CLOSE"]]$name
Y_stationary <- data_stationary[new_close_name]
}
}
# Pozostałe zmienne jako X
X_stationary <- data_stationary[, !colnames(data_stationary) %in%
c("CLOSE", if(exists("new_close_name")) new_close_name else "")]
cat("\nNowe wymiary:\n")
cat("Y_stationary:", nrow(Y_stationary), "x", ncol(Y_stationary), "\n")
cat("X_stationary:", nrow(X_stationary), "x", ncol(X_stationary), "\n")
---
title: "Sprawozdanie"
library(urca)
library(tseries)
remove_nonstationarity <- function(data, non_stationary_vars, max_diff = 2) {
transformed_data <- list()
diff_orders <- list()
for (var in colnames(data)) {
series <- data[[var]]
order <- 0
current_series <- series
if (var %in% non_stationary_vars) {
for (i in 0:max_diff) {
test_series <- if (i == 0) series else diff(series, differences = i)
adf <- ur.df(test_series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stationary <- adf_stat < adf_crit
kpss_stationary <- tryCatch({
kpss.test(test_series)$p.value > 0.05
}, error = function(e) TRUE)
if (adf_stationary && kpss_stationary) {
order <- i
break
}
}
current_series <- diff(series, differences = order)
}
name <- if (order > 0) paste0("D", if(order > 1) order else "", "_", var) else var
diff_orders[[var]] <- list(order = order, name = name)
transformed_data[[name]] <- current_series
}
# Wyrównaj długości (NA na początku)
max_lag <- max(sapply(diff_orders, function(x) x$order))
for (name in names(transformed_data)) {
series <- transformed_data[[name]]
padded <- c(rep(NA, max_lag), series)
transformed_data[[name]] <- head(padded, nrow(data))
}
df <- as.data.frame(transformed_data)
df <- df[complete.cases(df), ]  # opcjonalnie: tylko pełne wiersze
return(list(data = df, diff_info = diff_orders))
}
# ```
# ```{r wywołanie_funkcji}
# Zakładamy, że masz dane `data` i wektor nazw zmiennych niestacjonarnych `non_stationary_vars`
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
# Opcjonalne: wyświetlenie informacji o różnicowaniu
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
library(corrplot)
library(readxl)
library(tinytex)
library(ggcorrplot)
library(urca)
library(tseries)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(grid)
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
summary(diff_info)
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
summary(diff_info$CLOSE)
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
summary(diff_info$CLOSE$order)
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
summary(data_stationary)
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
non_stationary_vars
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(X)) {
series <- ts(X[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
non_stationary_vars
for (var in non_stationary_vars) {
cat(var, "\n")
}
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(X)) {
series <- ts(X[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
non_stationary_vars
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
non_stationary_vars
for (var in non_stationary_vars) {
cat(var, "\n")
}
remove_nonstationarity <- function(data, non_stationary_vars, max_diff = 2) {
transformed_data <- list()
diff_orders <- list()
for (var_name in colnames(data)) {
series <- data[[var]]
order <- 0
current_series <- series
if (var %in% non_stationary_vars) {
for (i in 0:max_diff) {
test_series <- if (i == 0) series else diff(series, differences = i)
adf <- ur.df(test_series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stationary <- adf_stat < adf_crit
kpss_stationary <- tryCatch({
kpss.test(test_series)$p.value > 0.05
}, error = function(e) TRUE)
if (adf_stationary && kpss_stationary) {
order <- i
break
}
}
current_series <- diff(series, differences = order)
}
name <- if (order > 0) paste0("D", if(order > 1) order else "", "_", var) else var
diff_orders[[var]] <- list(order = order, name = name)
transformed_data[[name]] <- current_series
}
# Wyrównaj długości (NA na początku)
max_lag <- max(sapply(diff_orders, function(x) x$order))
for (name in names(transformed_data)) {
series <- transformed_data[[name]]
padded <- c(rep(NA, max_lag), series)
transformed_data[[name]] <- head(padded, nrow(data))
}
df <- as.data.frame(transformed_data)
df <- df[complete.cases(df), ]  # opcjonalnie: tylko pełne wiersze
return(list(data = df, diff_info = diff_orders))
}
library(corrplot)
library(readxl)
library(tinytex)
library(ggcorrplot)
library(urca)
library(tseries)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(grid)
data <- read_excel("data.xlsx")
data <- data[, c("CLOSE", "INFLATION", "XAUUSD", "USDPLN", "WIG20", "S&P500",
"UNEMPLOYMENT", "PMI", "OIL")]
data[] <- lapply(data, function(col) {
na.approx(col, na.rm = FALSE)
})
Y <- data["CLOSE"]
X <- data[,c("INFLATION","XAUUSD", "USDPLN","WIG20","S&P500","UNEMPLOYMENT",
"PMI","OIL")]
summary(Y)
summary(X)
cor_matrix <- cor(data, use = "pairwise.complete.obs", method = "pearson")
corrplot(cor_matrix, method = "color",
order = "hclust",
addCoef.col = "black",
tl.col = "black", tl.cex = 2.5, cl.cex = 2.5, number.cex=2.6)
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
for (var in non_stationary_vars) {
cat(var, "\n")
}
remove_nonstationarity <- function(data, non_stationary_vars, max_diff = 2) {
transformed_data <- list()
diff_info <- list()
for (var_name in colnames(data)) {
original_series <- data[[var_name]]
current_series <- original_series
order <- 0
if (var_name %in% non_stationary_vars) {
for (i in 0:max_diff) {
test_series <- if (i == 0) original_series else diff(original_series, differences = i)
if (is_stationary_test(test_series)) {
order <- i
current_series <- test_series
break
}
if (i == max_diff) {
order <- max_diff
current_series <- diff(original_series, differences = max_diff)
}
}
}
new_name <- if (order > 0) paste0("D", if(order > 1) order else "", "_", var_name) else var_name
diff_info[[var_name]] <- list(order = order, name = new_name)
transformed_data[[new_name]] <- current_series
}
max_diff_order <- max(sapply(diff_info, function(x) x$order))
final_df <- as.data.frame(lapply(transformed_data, function(x) {
c(rep(NA, max_diff_order), x)[1:nrow(data) + max_diff_order]
}))
final_df <- final_df[complete.cases(final_df), ]
return(list(data = final_df, diff_info = diff_info))
}
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
summary(data_stationary)
