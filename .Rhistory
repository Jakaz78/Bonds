} else if (p_val < 0.1) {
signif_code <- "."
}
}
model_summary <- summary(model)
f_statistic <- model_summary$fstatistic
f_value <- f_statistic[1]
f_df1 <- f_statistic[2]
f_df2 <- f_statistic[3]
f_p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)
cat("Statystyka F:", round(f_value, 4), "\n")
cat("Stopnie swobody:", f_df1, "i", f_df2, "\n")
cat("p-value:", if(f_p_value < 0.001) "< 0.001" else round(f_p_value, 6), "\n")
coeffs <- coef(model)
equation <- "D_CLOSE = "
for(i in 1:length(coeffs)) {
if(i == 1) {
equation <- paste0(equation, round(coeffs[i], 6))
} else {
sign <- if(coeffs[i] >= 0) " + " else " - "
equation <- paste0(equation, sign, abs(round(coeffs[i], 6)), " × ", names(coeffs)[i])
}
}
equation <- paste0(equation, " + ε")
cat(equation, "\n\n")
param_names <- rownames(coefficients_df)
param_values <- coefficients_df$Estimate
param_pvalues <- coefficients_df$`Pr(>|t|)`
# === 1. Prognoza punktowa na zbiorze testowym (te same transformacje co train) ===
pred   <- predict(model, newdata = data_test_stationary)   # punktowa prognoza Δlog-rentowności
View(data_test)
View(data_test_stationary)
View(data_stationary)
View(hellwig_result)
View(data_test_stationary)
View(data_test_stationary)
library(corrplot)
library(readxl)
library(tinytex)
library(ggcorrplot)
library(urca)
library(tseries)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(grid)
library(lmtest)
library(car)
library(nortest)
library(sandwich)
library(strucchange)
library(nlme)
library(forecast)
data_all <- read_excel("data.xlsx")
data_all <- data_all[, -c(1, 3, 4)]
data_all[] <- lapply(data_all, function(col) {
na.approx(col, na.rm = FALSE)
})
n <- nrow(data_all)
train_size <- floor(0.8 * n)
data <- data_all[1:train_size, , drop = FALSE]
data_test  <- data_all[(train_size + 1):n, , drop = FALSE]
Y <- data["CLOSE"]
X <- data[, !names(data) %in% "CLOSE", drop = FALSE]
summary(Y)
summary(X)
cor_matrix <- cor(data, use = "pairwise.complete.obs", method = "pearson")
corrplot(cor_matrix, method = "color",
order = "alphabet",
addCoef.col = "black",
tl.col = "black", tl.cex = 2.5, cl.cex = 2.5, number.cex=2.6)
data <- data[, !(colnames(data) %in% c("XAUUSD","WIBOR","10YDEBOND","10YUSBOND","DETAL","USDPLN","INFLATION"))]
data_test <- data_test[, !(colnames(data_test) %in% c("XAUUSD","WIBOR","10YDEBOND","10YUSBOND","DETAL","USDPLN","INFLATION","UNEMPLOYMENT","PMI","S&P500"))]
data <- data[1:train_size, , drop = FALSE]
cor_matrix <- cor(data, use = "pairwise.complete.obs", method = "pearson")
corrplot(cor_matrix, method = "color",
order = "alphabet",
addCoef.col = "black",
tl.col = "black", tl.cex = 2.5, cl.cex = 2.5, number.cex=2.6)
data<-log(data)
data_test<-log(data_test)
check_stationarity <- function(x) {
adf_test <- ur.df(x, type = "trend")@teststat[1] < ur.df(x, type = "trend")@cval[1,"5pct"]
kpss_test <- kpss.test(x)$p.value > 0.05
return(adf_test & kpss_test)
}
non_stationary_vars <- c()
non_stationary_vars_test <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!check_stationarity(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
for (var in colnames(data_test)) {
series <- ts(data_test[[var]])
if (!check_stationarity(series)) {
non_stationary_vars_test <- c(non_stationary_vars_test, var)
}
}
stationarity_df <- data.frame(
Zmienna = colnames(data),
Stacjonarnosc = sapply(data, function(col) {
if (check_stationarity(ts(col))) {
return("Stacjonarna")
} else {
return("Niestacjonarna")
}
})
)
knitr::kable(stationarity_df, row.names = FALSE)
dir.create("plots", showWarnings = FALSE)
remove_nonstationarity <- function(data, non_stationary_vars, max_diff = 2,
show_plots = TRUE, save_plots = FALSE,
plot_dir = "plots") {
if (save_plots && !dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
transformed_data <- list()
diff_info <- list()
plots_before <- list()
plots_after <- list()
for (var_name in colnames(data)) {
original_series <- data[[var_name]]
current_series <- original_series
order <- 0
if (var_name %in% non_stationary_vars) {
for (i in 1:max_diff) {
test_series <- if (i == 0) original_series else diff(original_series, differences = i)
if (check_stationarity(test_series)) {
order <- i
current_series <- test_series
break
}
if (i == max_diff) {
order <- max_diff
current_series <- diff(original_series, differences = max_diff)
}
}
}
new_name <- if (order > 0) {
paste0("D", if(order > 1) order else "", "_", var_name)} else {
var_name
}
diff_info[[var_name]] <- list(order = order, name = new_name)
transformed_data[[new_name]] <- current_series
if (show_plots || save_plots) {
df_plot_before <- data.frame(Index = 1:length(original_series), Value = as.numeric(original_series))
df_plot_after  <- data.frame(Index = 1:length(current_series), Value = as.numeric(current_series))
plot_before <- ggplot(df_plot_before, aes(x = Index, y = Value)) +
geom_line(color = "blue", size = 0.7) +
labs(title = paste("Przed:", var_name, "Liczba różnicowań: ",order), x = "Czas", y = "Wartość") +
theme_minimal() +
theme(plot.title = element_text(size = 10, face = "bold"))
plot_after <- ggplot(df_plot_after, aes(x = Index, y = Value)) +
geom_line(color = "red", size = 0.7) +
labs(title = paste("Po:", new_name), x = "Czas", y = "Wartość") +
theme_minimal() +
theme(plot.title = element_text(size = 10, face = "bold"))
plots_before[[var_name]] <- plot_before
plots_after[[var_name]] <- plot_after
if (save_plots) {
ggsave(filename = file.path(plot_dir, paste0("before_", var_name, ".png")),
plot = plot_before, width = 6, height = 4, dpi = 300)
ggsave(filename = file.path(plot_dir, paste0("after_", new_name, ".png")),
plot = plot_after, width = 6, height = 4, dpi = 300)
}
}
}
max_diff_order <- max(sapply(diff_info, function(x) x$order))
final_df <- as.data.frame(lapply(transformed_data, function(x) {
c(rep(NA, max_diff_order), x)[1:(nrow(data) + max_diff_order)]
}))
final_df <- final_df[complete.cases(final_df), ]
return(list(
data = final_df,
diff_info = diff_info,
plots_before = plots_before,
plots_after = plots_after
))
}
remove_nonstationarity_test <- function(data_test, diff_info) {
transformed_data <- list()
max_diff_order <- max(sapply(diff_info, function(x) x$order))
for (var in names(diff_info)) {
if (!var %in% colnames(data_test)) next
order <- diff_info[[var]]$order
newname <- diff_info[[var]]$name
x <- data_test[[var]]
if (order == 0) {
transformed_data[[newname]] <- x
} else {
transformed_data[[newname]] <- diff(x, differences = order)
}
}
final_df <- as.data.frame(lapply(transformed_data, function(x) {
c(rep(NA, max_diff_order), x)[1:(nrow(data_test) + max_diff_order)]
}))
final_df <- final_df[complete.cases(final_df), ]
return(final_df)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!check_stationarity(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
result <- remove_nonstationarity(
data,
non_stationary_vars,
save_plots = TRUE,
show_plots = FALSE
)
data_stationary <- result$data
diff_info <- result$diff_info
stationarity_df <- data.frame(
Zmienna = colnames(data_stationary),
Stacjonarnosc = sapply(data_stationary, function(col) {
if (check_stationarity(ts(col))) {
return("Stacjonarna")
} else {
return("Niestacjonarna")
}
})
)
knitr::kable(stationarity_df, row.names = FALSE)
cor_matrix <- cor(data_stationary, use = "pairwise.complete.obs", method = "pearson")
corrplot(cor_matrix, method = "color",
order = "alphabet",
addCoef.col = "black",
tl.col = "black", tl.cex = 2.5, cl.cex = 2.5, number.cex=2.6)
for (col_name in colnames(data_stationary)) {
col_cv <- sd(data_stationary[[col_name]]) / mean(data_stationary[[col_name]]) * 100
col_var <- var(data_stationary[[col_name]])
cat(col_name, "- Współczynnik zmienności:", col_cv, "%, Wariancja: ", col_var,"\n")
}
#usuwam zmienne o prawie 0 wariancji i helwwig spada
data_stationary <- data_stationary[, !(colnames(data_stationary) %in% c("D2_UNEMPLOYMENT"))]
for (col_name in colnames(data_stationary)) {
col_cv <- sd(data_stationary[[col_name]]) / mean(data_stationary[[col_name]]) * 100
col_var <- var(data_stationary[[col_name]])
cat(col_name, "- Współczynnik zmienności:", col_cv, "%, Wariancja: ", col_var,"\n")
}
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]
Rxx <- R[-1, -1]
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
najlepsza_kombinacja_string <- hellwig_result$Zmienne[1]
best_hellwig_vars <- unlist(strsplit(najlepsza_kombinacja_string, ", "))
cat("Zmienne składowe w najlepszej kombinacji:\n")
for (zmienna in best_hellwig_vars) {
writeLines(zmienna)
}
cat("Pojemność Hellwiga dla tej kombinacji:", hellwig_result$Pojemnosc_Hellwiga[1], "\n")
zmienne_objaśniające_do_modelu <- unlist(strsplit(najlepsza_kombinacja_string, ", "))
cols_to_keep <- c(best_hellwig_vars, "D_CLOSE")
data_stationary <- data_stationary[, cols_to_keep]
data_test_stationary <- remove_nonstationarity_test(data_test, diff_info)
data_test_stationary <- data_test_stationary[, cols_to_keep]
formula_modelu <- reformulate(best_hellwig_vars, response = "D_CLOSE")
model <- lm(formula_modelu, data = data_stationary)
print(summary(model))
# Przygotowanie reszt
residuals_model <- residuals(model)
fitted_values <- fitted(model)
n_obs <- length(residuals_model)
n_params <- length(coef(model))
shapiro_test <- shapiro.test(residuals_model)
cat("   Statystyka W =", round(shapiro_test$statistic, 4), "\n")
cat("   p-value =", round(shapiro_test$p.value, 4), "\n")
# Test Jarque-Bera
jb_test <- jarque.bera.test(residuals_model)
cat("   Statystyka JB =", round(jb_test$statistic, 4), "\n")
cat("   p-value =", round(jb_test$p.value, 4), "\n")
par(mfrow = c(2, 2))
hist(residuals_model, breaks = 20, prob = TRUE, main = "Histogram reszt",
xlab = "Reszty", ylab = "Gęstość")
lines(density(residuals_model), col = "red", lwd = 2)
curve(dnorm(x, mean = mean(residuals_model), sd = sd(residuals_model)),
add = TRUE, col = "blue", lwd = 2)
legend("topright", c("Rzeczywista", "Teoretyczna"), col = c("red", "blue"), lwd = 2)
qqnorm(residuals_model,
main = "Wykres Q-Q reszt",
xlab = "Kwantyle teoretyczne",
ylab = "Kwantyle próbkowe")
qqline(residuals_model, col = "red")
dw_test <- durbinWatsonTest(model)
cat("   Statystyka DW =", round(dw_test$dw, 4), "\n")
cat("   p-value =", round(dw_test$p, 4), "\n")
ljung_test <- Box.test(residuals_model, lag = min(10, floor(n_obs/5)), type = "Ljung-Box")
cat("2. TEST LJUNGA-BOXA:\n")
cat("   Statystyka LB =", round(ljung_test$statistic, 4), "\n")
cat("   p-value =", round(ljung_test$p.value, 4), "\n")
bg_test <- bgtest(model, order = 2)
cat("   Statystyka LM =", round(bg_test$statistic, 4), "\n")
cat("   p-value =", round(bg_test$p.value, 4), "\n")
acf(residuals_model, main = "Funkcja autokorelacji reszt", lag.max = 20)
bp_test <- bptest(model)
cat("   Statystyka BP =", round(bp_test$statistic, 4), "\n")
cat("   p-value =", round(bp_test$p.value, 4), "\n")
gq_test <- gqtest(model, order.by = fitted(model))
cat("   Statystyka GQ =", round(gq_test$statistic, 4), "\n")
cat("   p-value =", round(gq_test$p.value, 4), "\n")
par(mfrow = c(2, 2))
plot(fitted_values, residuals_model, main = "Reszty vs Wartości dopasowane",
xlab = "Wartości dopasowane", ylab = "Reszty")
abline(h = 0, col = "red")
plot(fitted_values, abs(residuals_model), main = "|Reszty| vs Wartości dopasowane",
xlab = "Wartości dopasowane", ylab = "|Reszty|")
vif_values <- vif(model)
max_vif <- max(vif_values)
cat("Maksmalny VIF wynosi:",max_vif)
breakpoint <- floor(n_obs / 2)
chow_test <- sctest(formula_modelu, data = data_stationary, type = "Chow", point = breakpoint)
cat("   Statystyka F =", round(chow_test$statistic, 4), "\n")
cat("   p-value =", round(chow_test$p.value, 4), "\n")
cusum_test <- efp(formula_modelu, data = data_stationary, type = "Rec-CUSUM")
plot(cusum_test, main = "Test CUSUM stabilności parametrów")
reset_test <- resettest(model, power = 2:3, type = "fitted")
cat("   Statystyka F =", round(reset_test$statistic, 4), "\n")
cat("   p-value =", round(reset_test$p.value, 4), "\n")
signs <- ifelse(residuals_model > 0, 1, 0)
runs_test <- runs.test(as.factor(signs))
cat("   Statystyka =", round(runs_test$statistic, 4), "\n")
cat("   p-value =", round(runs_test$p.value, 4), "\n")
interaction_vars <- paste(best_hellwig_vars, collapse = " * ")
formula_interaction <- as.formula(paste("D_CLOSE ~", interaction_vars))
model_interaction <- lm(formula_interaction, data = data_stationary)
anova_result <- anova(model, model_interaction)
cat("   Statystyka F =", round(anova_result$F[2], 4), "\n")
cat("   p-value =", round(anova_result$`Pr(>F)`[2], 4), "\n")
tercile_1 <- floor(n_obs / 3)
tercile_2 <- floor(2 * n_obs / 3)
data_1 <- data_stationary[1:tercile_1, ]
data_2 <- data_stationary[(tercile_1+1):tercile_2, ]
data_3 <- data_stationary[(tercile_2+1):n_obs, ]
model_1 <- lm(formula_modelu, data = data_1)
model_2 <- lm(formula_modelu, data = data_2)
model_3 <- lm(formula_modelu, data = data_3)
cat("Współczynniki determinacji:\n")
cat("  Okres 1 (obs. 1-", tercile_1, "): R² =", round(summary(model_1)$r.squared, 4), "\n")
cat("  Okres 2 (obs.", tercile_1+1, "-", tercile_2, "): R² =", round(summary(model_2)$r.squared, 4), "\n")
cat("  Okres 3 (obs.", tercile_2+1, "-", n_obs, "): R² =", round(summary(model_3)$r.squared, 4), "\n\n")
# Porównanie parametrów
cat("PORÓWNANIE PARAMETRÓW W PODOKRESACH:\n")
coef_1 <- coef(model_1)
coef_2 <- coef(model_2)
coef_3 <- coef(model_3)
for(param in names(coef_1)) {
cat("Parametr", param, ":\n")
cat("  Okres 1:", round(coef_1[param], 4), "\n")
cat("  Okres 2:", round(coef_2[param], 4), "\n")
cat("  Okres 3:", round(coef_3[param], 4), "\n")
# Sprawdź czy parametry znacząco się różnią
diff_12 <- abs(coef_1[param] - coef_2[param])
diff_23 <- abs(coef_2[param] - coef_3[param])
diff_13 <- abs(coef_1[param] - coef_3[param])
cat("\n")
}
test_results <- data.frame(
Test = c("Normalność (Jarque-Bera)", "Autokorelacja (Ljung-Box)",
"Heteroskedastyczność (Breusch-Pagan)", "Współliniowość (max VIF)",
"Stabilność (Chow)", "Postać modelu (RESET)"),
Statystyka = c(round(jb_test$statistic, 3), round(ljung_test$statistic, 3),
round(bp_test$statistic, 3), ifelse(length(best_hellwig_vars) > 1, round(max(vif_values), 3), "N/A"),
round(chow_test$statistic, 3), round(reset_test$statistic, 3)),
p_value = c(round(jb_test$p.value, 3), round(ljung_test$p.value, 3),
round(bp_test$p.value, 3), "N/A", round(chow_test$p.value, 3), round(reset_test$p.value, 3)),
Wynik = c(ifelse(jb_test$p.value > 0.05, "SPEŁNIONE", "NIESPEŁNIONE"),
ifelse(ljung_test$p.value > 0.05, "SPEŁNIONE", "NIESPEŁNIONE"),
ifelse(bp_test$p.value > 0.05, "SPEŁNIONE", "NIESPEŁNIONE"),
ifelse(length(best_hellwig_vars) > 1, ifelse(max(vif_values) < 5, "SPEŁNIONE", "NIESPEŁNIONE"), "SPEŁNIONE"),
ifelse(chow_test$p.value > 0.05, "SPEŁNIONE", "NIESPEŁNIONE"),
ifelse(reset_test$p.value > 0.05, "SPEŁNIONE", "NIESPEŁNIONE"))
)
print(test_results)
# Ogólna ocena modelu
failed_tests <- sum(test_results$Wynik == "NIESPEŁNIONE")
total_tests <- nrow(test_results)
cat("Spełnione założenia:", total_tests - failed_tests, "/", total_tests, "\n")
cat("Niespełnione założenia:", failed_tests, "/", total_tests, "\n\n")
model_summary <- summary(model)
coefficients_df <- as.data.frame(model_summary$coefficients)
names(coefficients_df) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
param_names <- rownames(coefficients_df)
param_tvalues <- coefficients_df$`t value`
param_pvalues <- coefficients_df$`Pr(>|t|)`
significance_level <- 0.05 # Standardowy poziom istotności alfa
for(i in 1:length(param_names)) {
param_name <- param_names[i]
t_val <- param_tvalues[i]
p_val <- param_pvalues[i]
is_significant <- p_val < significance_level
signif_code <- ""
if (p_val < 0.001) {
signif_code <- "***"
} else if (p_val < 0.01) {
signif_code <- "**"
} else if (p_val < 0.05) {
signif_code <- "*"
} else if (p_val < 0.1) {
signif_code <- "."
}
}
model_summary <- summary(model)
f_statistic <- model_summary$fstatistic
f_value <- f_statistic[1]
f_df1 <- f_statistic[2]
f_df2 <- f_statistic[3]
f_p_value <- pf(f_value, f_df1, f_df2, lower.tail = FALSE)
cat("Statystyka F:", round(f_value, 4), "\n")
cat("Stopnie swobody:", f_df1, "i", f_df2, "\n")
cat("p-value:", if(f_p_value < 0.001) "< 0.001" else round(f_p_value, 6), "\n")
coeffs <- coef(model)
equation <- "D_CLOSE = "
for(i in 1:length(coeffs)) {
if(i == 1) {
equation <- paste0(equation, round(coeffs[i], 6))
} else {
sign <- if(coeffs[i] >= 0) " + " else " - "
equation <- paste0(equation, sign, abs(round(coeffs[i], 6)), " × ", names(coeffs)[i])
}
}
equation <- paste0(equation, " + ε")
cat(equation, "\n\n")
param_names <- rownames(coefficients_df)
param_values <- coefficients_df$Estimate
param_pvalues <- coefficients_df$`Pr(>|t|)`
# 3. Prognoza punktowa
pred   <- predict(model, newdata = data_test_stationary)
actual <- data_test_stationary$D_CLOSE
# 4. Miary jakości EX POST
MAE   <- mean(abs(actual - pred))
RMSE  <- sqrt(mean((actual - pred)^2))
rel_err <- abs(actual - pred) / abs(actual)
MAPE  <- mean(rel_err) * 100
sMAPE <- mean(2 * abs(actual - pred) / (abs(actual) + abs(pred))) * 100
cat("=== WYNIKI EX POST (zbiór testowy) ===\n")
cat("MAE   =", round(MAE, 6), "\n")
cat("RMSE  =", round(RMSE, 6), "\n")
cat("MAPE  =", round(MAPE, 2),  "%\n")
cat("sMAPE =", round(sMAPE, 2), "%\n")
library(corrplot)
library(readxl)
library(tinytex)
library(ggcorrplot)
library(urca)
library(tseries)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(grid)
library(lmtest)
library(car)
library(nortest)
library(sandwich)
library(strucchange)
library(nlme)
library(forecast)
coeffs <- coef(model)
cat(equation)
equation <- "D_CLOSE = "
for(i in 1:length(coeffs)) {
if(i == 1) {
equation <- paste0(equation, round(coeffs[i], 6))
} else {
sign <- if(coeffs[i] >= 0) " + " else " - "
equation <- paste0(equation, sign, abs(round(coeffs[i], 6)), " × ", names(coeffs)[i])
}
}
equation <- paste0(equation, " + ε")
cat(equation, "\n\n")
param_names <- rownames(coefficients_df)
param_values <- coefficients_df$Estimate
param_pvalues <- coefficients_df$`Pr(>|t|)`
