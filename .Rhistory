Rxx <- R[-1, -1]      # macierz korelacji X między sobą
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1  # bo suma korelacji z innymi jest zerowa
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
print(hellwig_result[[1]])
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]        # korelacje zmiennych X z y
Rxx <- R[-1, -1]      # macierz korelacji X między sobą
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1  # bo suma korelacji z innymi jest zerowa
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
print(head(hellwig_result,5))
View(hellwig_result)
print(R)
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]        # korelacje zmiennych X z y
Rxx <- R[-1, -1]      # macierz korelacji X między sobą
print(R)
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
print(head(hellwig_result,5))
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]
Rxx <- R[-1, -1]
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
hellwig_result <- hellwig_result["Zmienne", "Pojemnosc_Hellwiga"]
head(hellwig_result,5)
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]
Rxx <- R[-1, -1]
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
hellwig_result <- hellwig_result[, c("Zmienne", "Pojemnosc_Hellwiga")]
head(hellwig_result,5)
for (i in 1:head(hellwig_result,5)) {
cat("Zmienne: ", hellwig_result$Zmienne[i], ", Pojemnosc Hellwiga: ", hellwig_result$Pojemnosc_Hellwiga[i], "\n")
}
for (i in head(hellwig_result,5)) {
cat("Zmienne: ", hellwig_result$Zmienne[i], ", Pojemnosc Hellwiga: ", hellwig_result$Pojemnosc_Hellwiga[i], "\n")
}
cat("Najlepsza kombinacja zmiennych:",  hellwig_result$Zmienne[1], "\n")
cat("Pojemność Hellwiga dla tej kombinacji:", hellwig_result$Pojemnosc_Hellwiga[1], "\n")
zmienne_oddzielnie <- unlist(strsplit(hellwig_result$Zmienne[1], ", "))
cat("\nZmienne składowe w najlepszej kombinacji:\n")
for (zmienna in zmienne_oddzielnie) {
cat("- ", zmienna, "\n")
}
zmienne_oddzielnie <- unlist(strsplit(hellwig_result$Zmienne[1], ", "))
cat("\nZmienne składowe w najlepszej kombinacji:\n")
for (zmienna in unlist(strsplit(hellwig_result$Zmienne[1], ", "))) {
cat("- ", zmienna, "\n")
}
cat("Pojemność Hellwiga dla tej kombinacji:", hellwig_result$Pojemnosc_Hellwiga[1], "\n")
cat("\nZmienne składowe w najlepszej kombinacji:\n")
for (zmienna in unlist(strsplit(hellwig_result$Zmienne[1], ", "))) {
cat(zmienna, "\n")
}
cat("Pojemność Hellwiga dla tej kombinacji:", hellwig_result$Pojemnosc_Hellwiga[1], "\n")
for (var in colnames(data_stationary)) {
series_transformed <- ts(data_stationary[[var]])
if (is_stationary_test(series_transformed)) {
cat(var, ": Stacjonarna\n")
} else {
cat(var, ": Niestacjonarna")
}
}
for (col_name in colnames(data_stationary)) {
col_cv <- sd(data_stationary[[col_name]]) / mean(data_stationary[[col_name]]) * 100
col_var <- var(data_stationary[[col_name]])
cat(col_name, "- Współczynnik zmienności:", col_cv, "%, Wariancja: ", col_var,"\n")
}
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]
Rxx <- R[-1, -1]
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
cat("\nZmienne składowe w najlepszej kombinacji:\n")
for (zmienna in unlist(strsplit(hellwig_result$Zmienne[1], ", "))) {
cat(zmienna, "\n")
}
cat("Pojemność Hellwiga dla tej kombinacji:", hellwig_result$Pojemnosc_Hellwiga[1], "\n")
---
title: "Sprawozdanie"
library(corrplot)
library(readxl)
library(tinytex)
library(ggcorrplot)
library(urca)
library(tseries)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(grid)
data <- read_excel("data.xlsx")
data <- data[, c("CLOSE", "INFLATION", "XAUUSD", "USDPLN", "WIG20", "S&P500",
"UNEMPLOYMENT", "PMI", "OIL")]
data[] <- lapply(data, function(col) {
na.approx(col, na.rm = FALSE)
})
Y <- data["CLOSE"]
X <- data[,c("INFLATION","XAUUSD", "USDPLN","WIG20","S&P500","UNEMPLOYMENT",
"PMI","OIL")]
summary(Y)
summary(X)
cor_matrix <- cor(data, use = "pairwise.complete.obs", method = "pearson")
corrplot(cor_matrix, method = "color",
order = "hclust",
addCoef.col = "black",
tl.col = "black", tl.cex = 2.5, cl.cex = 2.5, number.cex=2.6)
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
is_stationary_test <- function(series) {
adf_result <- {
adf <- ur.df(series, type = "trend", selectlags = "AIC")
adf_stat <- adf@teststat[1]
adf_crit <- adf@cval[1, "5pct"]
adf_stat < adf_crit
}
kpss_result <- {
kpss <- kpss.test(series)
kpss$p.value > 0.05
}
return(adf_result && kpss_result)
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
for (var in non_stationary_vars) {
cat(var, "\n")
}
remove_nonstationarity <- function(data, non_stationary_vars, max_diff = 2, show_plots = TRUE) {
transformed_data <- list()
diff_info <- list()
plots_before <- list()
plots_after <- list()
for (var_name in colnames(data)) {
original_series <- data[[var_name]]
current_series <- original_series
order <- 0
if (show_plots) {
df_plot_before <- data.frame(
Index = 1:length(original_series),
Value = as.numeric(original_series)
)
plot_before <- ggplot(df_plot_before, aes(x = Index, y = Value)) +
geom_line(color = "blue", size = 0.7) +
labs(title = paste("Przed:", var_name),
x = "Czas", y = "Wartość") +
theme_minimal() +
theme(plot.title = element_text(size = 10, face = "bold"))
plots_before[[var_name]] <- plot_before
}
if (var_name %in% non_stationary_vars) {
for (i in 0:max_diff) {
test_series <- if (i == 0) original_series else diff(original_series, differences = i)
if (is_stationary_test(test_series)) {
order <- i
current_series <- test_series
break
}
if (i == max_diff) {
order <- max_diff
current_series <- diff(original_series, differences = max_diff)
}
}
}
new_name <- if (order > 0) paste0("D", if(order > 1) order else "", "_", var_name) else var_name
diff_info[[var_name]] <- list(order = order, name = new_name)
transformed_data[[new_name]] <- current_series
if (show_plots) {
df_plot_after <- data.frame(
Index = 1:length(current_series),
Value = as.numeric(current_series)
)
plot_after <- ggplot(df_plot_after, aes(x = Index, y = Value)) +
geom_line(color = "red", size = 0.7) +
labs(title = paste("Po:", new_name),
x = "Czas", y = "Wartość") +
theme_minimal() +
theme(plot.title = element_text(size = 10, face = "bold"))
plots_after[[var_name]] <- plot_after
}
}
max_diff_order <- max(sapply(diff_info, function(x) x$order))
final_df <- as.data.frame(lapply(transformed_data, function(x) {
c(rep(NA, max_diff_order), x)[1:(nrow(data) + max_diff_order)]
}))
final_df <- final_df[complete.cases(final_df), ]
if (show_plots && length(plots_before) > 0) {
for (var_name in names(plots_before)) {
if (var_name %in% names(plots_after)) {
combined_plot <- arrangeGrob(
plots_before[[var_name]],
plots_after[[var_name]],
ncol = 2
)
grid.newpage()
grid.draw(combined_plot)
}
}
}
return(list(
data = final_df,
diff_info = diff_info,
plots_before = plots_before,
plots_after = plots_after
))
}
show_all_plots <- function(result, ncol = 2) {
plots_before <- result$plots_before
plots_after <- result$plots_after
all_plots <- list()
for (var_name in names(plots_before)) {
if (!is.null(plots_before[[var_name]]) && !is.null(plots_after[[var_name]])) {
all_plots <- append(all_plots, list(plots_before[[var_name]], plots_after[[var_name]]))
}
}
if (length(all_plots) > 0) {
num_rows <- ceiling(length(all_plots) / ncol)
combined <- do.call(arrangeGrob, c(all_plots, list(ncol = ncol)))
grid.newpage()
grid.draw(combined)
}
}
non_stationary_vars <- c()
for (var in colnames(data)) {
series <- ts(data[[var]])
if (!is_stationary_test(series)) {
non_stationary_vars <- c(non_stationary_vars, var)
}
}
result <- remove_nonstationarity(data, non_stationary_vars)
data_stationary <- result$data
diff_info <- result$diff_info
for (var in names(diff_info)) {
info <- diff_info[[var]]
cat(var, "-> różnicowana", info$order, "razy, nowa nazwa:", info$name, "\n")
}
for (var in colnames(data_stationary)) {
series_transformed <- ts(data_stationary[[var]])
if (is_stationary_test(series_transformed)) {
cat(var, ": Stacjonarna\n")
} else {
cat(var, ": Niestacjonarna")
}
}
hellwig_method_original <- function(y, X) {
all_vars <- colnames(X)
R <- cor(cbind(y, X))
r0 <- R[-1, 1]
Rxx <- R[-1, -1]
results <- list()
for (k in 1:length(all_vars)) {
combos <- combn(all_vars, k, simplify = FALSE)
for (combo in combos) {
indices <- match(combo, all_vars)
r0_sub <- r0[indices]
Rxx_sub <- Rxx[indices, indices]
h_kj <- numeric(length(indices))
for (j in seq_along(indices)) {
if (length(indices) == 1) {
denom <- 1
} else {
denom <- 1 + sum(abs(Rxx_sub[j, -j]))
}
h_kj[j] <- (r0_sub[j]^2) / denom
}
H_k <- sum(h_kj)
results[[paste(combo, collapse = ", ")]] <- H_k
}
}
df <- data.frame(
Zmienne = names(results),
Pojemnosc_Hellwiga = round(unlist(results), 4),
row.names = NULL
)
df <- df[order(-df$Pojemnosc_Hellwiga), ]
return(df)
}
X_stat <- data_stationary[, -1]
Y_stat <- data_stationary["D_CLOSE"]
hellwig_result <- hellwig_method_original(Y_stat, X_stat)
cat("\nZmienne składowe w najlepszej kombinacji:\n")
for (zmienna in unlist(strsplit(hellwig_result$Zmienne[1], ", "))) {
cat(zmienna, "\n")
}
cat("Pojemność Hellwiga dla tej kombinacji:", hellwig_result$Pojemnosc_Hellwiga[1], "\n")
library(corrplot)
library(readxl)
library(tinytex)
library(ggcorrplot)
library(urca)
library(tseries)
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(gridExtra)
library(grid)
for (var in non_stationary_vars) {
writeLines(var)
}
for (var in non_stationary_vars) {
writeLines(var)
}
